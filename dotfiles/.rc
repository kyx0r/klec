#!/bin/sh
export ENVSET=1
export EXINIT="se noled|tp Oo{
}kA
	|tp 1G2\"qY2j\"Qy$|tp oA {jo}koa|tp 0\"wy$|tp o:e \!p \$c|tp 0\"ey$|tp oa\"\"i|tp 0\"ry$|tp oI/*A*/|tp 0\"aY|tp oi/*A*/|tp 0\"sy$|tp o/\/\*
2x/\*\/
2x|tp 02k2\"dY2j\"Dy$|tp o>\%<<\$\%<<|tp 0\"xy$|tp o:\!cp \% \%_\\|w\\|\!git diff --no-index \%_ \%|tp 0\"ly$|tp o:ac  \\|tp i\\|u\\|ac3ls|tp 0\"cy$|tp o:cd \!p \$c|tp 0\"fy$|inc (^[\!.git]+[^\\/]+$)|tp 50u|se led"

export KISS_SU=su
export KISS_PATH=
KISS_PATH="$HOME/kiss/no-updates"
KISS_PATH="${KISS_PATH}:$HOME/kiss/repo/core"
KISS_PATH="${KISS_PATH}:$HOME/kiss/kiss-xorg/extra"
KISS_PATH="${KISS_PATH}:$HOME/kiss/kiss-xorg/xorg"
KISS_PATH="${KISS_PATH}:$HOME/kiss/kiss-xorg/community"
KISS_PATH="${KISS_PATH}:$HOME/kiss/repo/extra"
KISS_PATH="${KISS_PATH}:$HOME/kiss/community/community"
KISS_PATH="${KISS_PATH}:$HOME/kiss/repo-vulkan"
export CHROME_FLAGS="--no-sandbox"
export XDG_RUNTIME_DIR=/tmp
export PATH=$HOME/klec/shell:$PATH
export EDITOR=vi
export HOST_PS1="\[\e[1;33m\]$(printf '%.1s%s' "$HOSTNAME" "${HOSTNAME#${HOSTNAME%?}}")\[\e[m\]"
export PS1="\[\e[1;31m\]\A\[\e[m\]$HOST_PS1\[\e[1;32m\]\w\[\e[m\] "
export CFLAGS="-O2"
export KCFLAGS="$CFLAGS"
export CXXFLAGS="$CFLAGS"
export KCPPFLAGS="$CFLAGS"
export NCORES="$(grep "^processor" /proc/cpuinfo | wc -l)"
export MAKEFLAGS="-j$NCORES"
export PREFIX=/usr
export DISPLAY=:2
export FDMAXLEN=0

# git
alias g='git'
alias ga='git add'
alias gal='git add .'
alias gb='git branch'
alias gc='git commit'
alias gcm='git commit -m'
alias gcms='git commit -S -m'
alias gco='git checkout'
alias gcom='git checkout main || git checkout master'
alias gd='git diff'
alias gds='git diff --staged'
alias gf='git fetch'
alias gl='git log --graph --oneline'
alias glg="git log --graph --decorate --stat"
alias glf='git log --follow --'
alias gp='git push'
alias gpf='git push --force'
alias gpd='git push origin --delete'
alias gpl='git pull'
alias grb='git rebase'
alias grc='git rebase --continue'
alias gs='git status'
alias ge='git config user.email'
alias gsh='git stash'
alias grh='git reset --hard'
alias gr='git restore'
alias grs='git reset'
alias gcl='git clean'
alias gclf='git clean -f'
alias gcls='git clean -fxd'
alias gf='git fetch'
alias gfv='git fetch -v'
alias gurl='git remote get-url --push origin'
alias gpurl='git remote set-url --push origin'
alias gurls='git remote get-url --all origin'
alias gra='git remote add'
alias gcp='g cherry-pick'
alias gcn='g cherry-pick --continue'
alias gca='g cherry-pick --abort'
alias gfp='git format-patch'
alias gam='git am'
alias gt='git tag'
gdh() { git diff HEAD~${@}; }
gap() { for arg in "$@"; do git apply -3 < "$arg"; done; }
grsr() { git reset $1 && rm $1; }
gct() { git checkout tags/$1; }
gfork() { git remote add fork "$1" && git fetch fork && git merge fork/master; }
grt() { git reset HEAD~"$1"; }
gcop() {
	first="$1"; shift;
	for var in "$@"
	do
		git checkout $first -- $var
	done
}
gcr() {
	git clone --recursive "$@"
	if [ $# -eq 1 ]; then
		cd $(echo "$1" | sed 's/.*\///' | sed 's/.git$//')
	fi
}
gtossh() { echo "git@${1}:$(git remote get-url --push origin | grep -E -o '[^/]*.[^/]*$')"; }
gcmf() { git commit -m "$(git diff --name-only --cached | sed -n "$2p" | tr '\n' ':') $1"; }
gcmfs() {
	MSG=""
	ffor "$(git diff --name-only --cached | sed -n "$2p")"\
	"printf '%s: '" "; read i; MSG=\$(printf '%b\n' \"\$MSG\\n\$p: \$i\")"
	git commit -m "$1
$MSG"
}

# void linux
alias xq='xbps-query -R -s'
alias xi='xbps-install'
alias xr='xbps-remove'

# arch linux
alias pac='pacman'
alias pacfs='pacman -Fx'
alias pacs='pacman -Ss'
alias pacu='pacman -Syyu'
alias paci='pacman -Qi'
alias pacl='pacman -Ql'
alias pc='rm /var/lib/pacman/db.lck'
alias mpkg='makepkg -si --skippgpcheck --skipinteg --skipchecksums'

# kiss linux
alias k='kiss'
alias kc='kiss-chroot'
alias kd='export KISS_DEBUG=1'
alias kdu='unset KISS_DEBUG'
alias kds='export KISS_STRIP=0'
alias km='kiss manifest'
alias krv='kiss revdepends'
alias kdp='kiss depends'
krepo() { export KISS_PATH="$KISS_PATH:$HOME/kiss/$*"; }
kow() { kiss owns /bin/$1; }
kpc() {
	dirs=$(ls $HOME/.cache/kiss/proc/*/build/)
	echo "$dirs" | tr '\n' ' ' | sed "s/  /\n/g" ; echo
	if [ "$2" ]; then
		cd $HOME/.cache/kiss/proc/$2*/build/$1*;
	else
		cd $HOME/.cache/kiss/proc/*/build/$1*;
	fi
}
knu() { mkdir -p $HOME/kiss/no-updates && cp -r /var/db/kiss/installed/"$1" $HOME/kiss/no-updates; }
kru() { rm -Rf $HOME/kiss/no-updates/"$1"; }
ki() { export KISS_PROMPT=0 && kiss b "$1" && kiss i "$1" && unset KISS_PROMPT; }
kci() { rm $HOME/.cache/kiss/bin/"$1"* && ki $1; }
kcd() { cd $(kiss search "$1"*) && echo "$(kiss search "$1"*)"; }
krs() { export KISS_FORCE=1; for file in $@; do kiss r "$file"; done; unset KISS_FORCE; }
kcmv() { git commit -m "$(basename $(pwd)): $* $(cat version)"; }
kcmvs() { git commit -S -m "$(basename $(pwd)): $* $(cat version)"; }
kcm() { git commit -m "$(basename $(pwd)): $*"; }
kcms() { git commit -S -m "$(basename $(pwd)): $*"; }

# make
alias m='make'
alias mi='make install'
alias mc='make clean'
alias mu='make uninstall'

# networking crap
alias rn='route -n'
alias ipn='ip -brief neigh show'
alias lsnet='netstat -tulpn'
alias wip='ipconfig'
alias wipr='ipconfig //renew'
alias td='tcpdump'
ipa() { ip a add "$1" dev "$2"; }
ipd() { ip a del "$1" dev "$2"; }
ipra() { ip route add "$1" via "${1%.*}.$((${1##*.}+1))" dev "$2"; }
iprd() { ip route del "$1"; }

# ffmpeg
tomp4() { ffmpeg -i "$1" -vcodec libx265 -crf 28 "${1%.*}.mp4"; }
fftrim() { ffmpeg -accurate_seek -i "$1" -to "$2" -c:v copy -c:a copy $(funiq "$1"); }
fframe() { ffmpeg -i "$1" -vf fps=1/5 '%04d.png'; }
chfps() { ffmpeg -y -i "$1" -vf "setpts=1.25*PTS" -r $2 $(funiq "$1"); } # x > 1 slow down, x < 1 speed up
nullasrc() { ffmpeg -i "$1" -f lavfi -i anullsrc=channel_layout=stereo:sample_rate=48000 -c:v copy -shortest $(funiq "$1"); }
ffchk() { ffmpeg -loglevel verbose -i "$1" -map 0:a -f null -; }

# random progs
alias zdel='find . -size 0 -print -delete'
alias llm='source prompts.sh'
alias date='date +"%Y-%m-%d %H:%M:%S"'
alias sha='sha256sum'
alias reset='stty sane && reset'
alias re='grep -i --color=auto'
alias lre='ls -glhaS | grep -i --color=auto'
alias ls='ls --color=auto'
alias l='ls -glhaS'
alias lt='ls -glhat'
alias i='vi'
alias df='df -h'
alias cp='cp -r'
alias rm='rm -rf'
alias s='su -l'
alias feh='feh --title %f___[%wX%h]_[%u/%l] -p'
alias d='gdb --args'
alias rd='r2 -A -d -e dbg.bpinmaps=false -e bin.relocs.apply=true'
alias fdmesg='dmesg -w | tee f'
alias de='dmesg'
alias c='cd ..'
alias fnd='find . -name'
alias thw='hwclock --systohc'
alias va='valgrind --log-file=valog'
alias cgr='valgrind --tool=callgrind'
alias tmd='mount -o size=256G,noatime -t tmpfs tmpfs'
alias b='./*build.sh build && ./*build.sh install'
alias rc='source $HOME/.rc'
alias xo='xclip -selection clipboard'
alias xp='xclip -o'
alias xsleep='xset dpms force standby'
alias wp='waypaste'
alias wo='waycopy'
alias gmk='grub-mkconfig -o /boot/grub/grub.cfg'
alias gin='grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB'
alias mdl='yt-dlp -x --audio-quality 0'
alias psa='ps aux'
alias psx='ps aux | grep'
alias ptrace='strace -p'
alias virtm='virt-viewer -f --hotkeys=toggle-fullscreen=shift+f11,release-cursor=shift+f12'
alias j='jobs'
alias q='fg'
alias 1q='fg %1'
alias 2q='fg %2'
alias 3q='fg %3'
alias 4q='fg %4'
alias 5q='fg %5'
alias 6q='fg %6'
alias 7q='fg %7'
alias 8q='fg %8'
alias 9q='fg %9'
alias me='ssh kyryl.me'
alias dl='curl -O'
alias dlh='curl -s -L -O'
alias fs='stat'
alias ctl='systemctl'
alias pyenv='python -m venv .env'
alias pyact='source .env/bin/activate'

cap() { file=$1; shift; script $file -c "sh -i -c \"$*\""; }
dedup() { cat -n "$1" | sort -u -k2,7 | sort -n | sed 's/[^\t]*.//'; }
sdedup() { grep -v '^$' "$1" | sort -u > "$1".tmp && mv "$1.tmp" "$1"; }
trace() { strace -p $(pidof $@); }
pk() { kill $(ps ax | awk "/$1/ {print \$1}"); }
args() { ps -o args= $(pidof $@); }
prepend() { (echo "$1"; cat "$2") > temp && mv temp "$2"; }
fappend() { mv "$1" "${2}${1}"; }
fdate() { case $1 in *.*) mv $1 "${1%%.*}_$(date '+%Y-%m-%d').${1#*.}"; ;; *) mv $1 "$1_$(date '+%Y-%m-%d')"; ;; esac; }
fcat() { printf '%b%s%b' "cat <<\\\\EOF > $1\n" "$(cat $1)" "\nEOF\n"; }
randmac() { ip link set dev $1 address $(openssl rand -hex 6 | sed 's/\(..\)/\1:/g; s/:$//'); }
enc() { openssl enc -aes-256-cbc -pbkdf2 -iter 20000 -in "$1" -out "$1.enc"; }
dec() { openssl enc -d -aes-256-cbc -pbkdf2 -iter 20000 -in "$1"; }
theme() { echo 'if [ -z "${THEMESET}" ]; then base16-pulsar.sh; export THEMESET=1; fi;' >> $HOME/.lrc; }
nrstr() { filename="$1"; echo "${filename}" | awk '{print tolower($0)}'; }
nrfile() { mv "$1" $(nrstr "$1"); }
neq() { echo "-$(seq -s ' -' $@)"; }
nopw() { [ "$1" ] && passwd -d "$@" && return; passwd -d $(id -nu); }
gpass() { tr -dc 'A-Za-z0-9' < /dev/urandom | head -c 12; }
path() { export PATH="$@:"$PATH; }
crop() { magick "$1" -crop "$2" "_$1"; }
imgs() { magick "$1" -strip -quality "$2" "_$1"; }
ntmount() { ntfs-3g -o uid=1000,gid=1000,dmask=22,fmask=133 "$@"; }
sof() { scp -r "$1" root@kyryl.me:"$2"; } #of = upload
sif() { scp -r root@kyryl.me:"$@"; } #if = download
scat() { cat ~/.ssh/id_rsa.pub | ssh "$1" 'cat >> .ssh/authorized_keys'; }
e() { echo "$@"; }
p() { printf "$@"; }
# ffor() usage: inf "path/any string" "cmd" "extra opts"
ffor() { IFS="
"; for p in $1; do eval "$2 \$p $3"; done }
inf() { while :; do eval "$@"; done }
sd() {
	reg=".*$1[^\/]*$"; if [ "$2" ]; then reg=".*$1"; fi;
	dir=$(find -type d -regex $reg); echo "$dir"  | grep -n -E . && read i;
	if [ -z "$i" ]; then i=1; fi;
	cd "$(echo "$dir" | sed -n "$i"p)"
}
fup() { curl -F"file=@$@" https://0x0.st/; }
loc() { find . -name "$@" | xargs wc -l; }
r() { grep -n -r "$@" . ; }
calc() { exp=$(echo "$*" | sed 's/\[/\(/g; s/\]/\)/g; s/x/\*/g'); echo $(($exp)); }
cdls() {
	export PS1="\[\e[1;31m\]\A\[\e[m\]$HOST_PS1\[\e[1;32m\]\w\[\e[m\] "
	\cd "$@" && l;
}
cdlsn() {
	case $CDSTACK in *"c$1"|*"c$1"c*) true;; *) export CDSTACK="${CDSTACK}c$1" ;; esac
	export PS1="\[\e[1;31m\]\A\[\e[m\]$HOST_PS1\[\e[1;35m\]$1\[\e[1;32m\]\w\[\e[m\] "
	\cd "$2" && l;
}
fullpath() {
	f=$@;
	if [ -d "$f" ]; then
		base="";
		dir="$f";
	else
		base="/$(basename "$f")";
		dir=$(dirname "$f");
	fi;
	dir=$(\cd "$dir" && pwd);
	echo "$dir$base"
}
replace() {
	tmp="$1_"
	head -n "$(($2 - 1))" "$1" > "$tmp"
	echo "$3" >> "$tmp"
	tail -n "+$(($2 + 1))" "$1" >> "$tmp"
	mv "$tmp" "$1"
}
alias cd='cdls'
alias v='cd'
alias vv='cd -'
alias csc='unset CDSTACK'
cdsplit() {
	old_ifs=$IFS
	IFS=c
	set -- $CDSTACK
	IFS=$old_ifs
	first="$2"
	for last; do true; done
}
gg() {
	[ -z "$CDSTACK" ] && return
	cdsplit
	eval "var=\$c${last}"
	case $PWD in "$var") CDSTACK="c${last}${CDSTACK%c${last}}"; cdsplit; ;; esac
	eval "var=\$c${last}"
	export PS1="\[\e[1;31m\]\A\[\e[m\]$HOST_PS1\[\e[1;35m\]$last\[\e[1;32m\]\w\[\e[m\] "
	\cd "$var"
	export CDSTACK="c${last}${CDSTACK%c${last}}"
}
bb() {
	[ -z "$CDSTACK" ] && return
	cdsplit
	eval "var=\$c${first}"
	case $PWD in "$var") CDSTACK="${CDSTACK##c${first}}c${first}"; cdsplit; ;; esac
	eval "var=\$c${first}"
	export PS1="\[\e[1;31m\]\A\[\e[m\]$HOST_PS1\[\e[1;35m\]$first\[\e[1;32m\]\w\[\e[m\] "
	\cd "$var"
	export CDSTACK="${CDSTACK##c${first}}c${first}"
}
fd() {
	sarg=""
	if [ "$1" ]; then
		case $1 in
			''|*[!0-9-]*)
				sarg="$(fullpath $1)"
			;;
			*)
				for arg in "$@"; do
					if [ "$arg" -lt 0 ]; then
						cnt=${arg#-}
						echo "$(sed "${cnt}s/.*//" "$HOME/links")" > "$HOME/links"
					else
						sarg="$(pwd)"
					fi
				done
				if [ "$1" -lt 0 ]; then fd; return; fi
			;;
		esac
	fi
	[ $# -ge 1 ] && shift;
	cnt=0
	[ "$CDSTACK" ] && [ -z "$sarg" ] && echo "$CDSTACK"
	while IFS= read -r line || [[ -n "$line" ]]; do
		cnt=$((cnt+1))
		if [ "$sarg" ]; then
			if [ -z "$line" ]; then
				case $sarg in *[[:space:]]*) sarg="\"$sarg\"" ;; esac
				line="$sarg | $@"
				replace "$HOME/links" $cnt "$line" && fd
				return
			fi
			continue
		fi
		[ -z "$line" ] && continue
		p=${line%% | *}
		cmd="${line#"$p | "}"
		eval "export c${cnt}=$p"
		eval "var=\"$cmd\""
		alias "$cnt"="$var"
		len=50
		if [ ${#p} -gt $len ]; then
			part=${p##*/}
			p="${p:0:$len}.../${part:0:$len}"
		else
			p="${p:0:$len}"
		fi
		var="$cnt $p"
		[[ ${#var} -gt $FDMAXLEN ]] && FDMAXLEN="${#var}";
		printf "$cnt $p"
		x=$(($FDMAXLEN - ${#var}))
		while [ $x -gt 0 ];
		do
			printf " "
			x=$(($x-1))
		done
		printf " | %s\n" "$cmd"
	done < "$HOME/links"
	export FDMAXLEN
	if [ "$sarg" ]; then
		case $sarg in *[[:space:]]*) sarg="\"$sarg\"" ;; esac
		echo "$sarg | $@" >> "$HOME/links" && fd;
	fi
}
alias f='fd'
ff() { arg=$@; [ ! "$arg" ] && arg="."; if [ -d "$arg" ]; then fd "$arg" cdlsn \$cnt \$p; else fd "$arg" vi \$p; fi }
frm() { fd $(neq "$@"); }
ii() { [ "$1" ] && if ! grep -q -e "$1" "$HOME/links"; then fd "$1" vi \$p &> /dev/null; fi; vi "$@"; }

funiq() {
	local full_name=$(fullpath "$1")
	local base_name="${full_name%.*}"
	local file_ext=".${full_name##*.}"
	if [ "$file_ext" = ".$full_name" ]; then file_ext=""; fi
	local count=1
	while [ -f "$base_name${count}${file_ext}" ]; do
		((count++))
	done
	echo "$base_name${count}${file_ext}"
}

compr() {
	FILE=$1
	shift
	case $FILE in
	*.tar.bz2) tar cjf "$FILE" "${FILE%%.*}"  ;;
	*.tar.gz)  tar czf "$FILE" "${FILE%%.*}"  ;;
	*.tgz)     tar czf "$FILE" "${FILE%.*}"   ;;
	*.zip)     zip "$FILE" "${FILE%.*}"       ;;
	*.rar)     rar "$FILE" "${FILE%.*}"       ;;
	*.7z)      7z a -mx9 "$FILE" "${FILE%.*}" ;;
	*.lz4)     lz4 -9 "${FILE%.*}" "$FILE"    ;;
	*)         echo "Filetype not recognized" ;;
	esac
}

ex() {
	if [ ! -f $1 ]; then
		echo "'$1' is not a valid file"
		return
	fi
	case $1 in
	*.tar.bz2)   tar xjf $1   ;;
	*.tar.gz)    tar xzf $1   ;;
	*.bz2)       bunzip2 $1   ;;
	*.rar)       unrar x $1   ;;
	*.gz)        gunzip $1    ;;
	*.tar)       tar xf $1    ;;
	*.tbz2)      tar xjf $1   ;;
	*.tgz)       tar xzf $1   ;;
	*.zip)       unzip $1     ;;
	*.Z)         uncompress $1;;
	*.7z)        7za e x $1   ;;
	*.deb)       ar x $1      ;;
	*.tar.xz)    tar xf $1    ;;
	*.tar.zst)   unzstd $1    ;;
	*)           echo "'$1' cannot be extracted via ex()" ;;
	esac
}

cflg() {
	export CFLAGS="$1"
	export KCFLAGS="$CFLAGS"
	export CXXFLAGS="$CFLAGS"
	export KCPPFLAGS="$CFLAGS"
}

o3() {
	cflg "-O3 -pipe -mtune=native -march=native"
}

o0() {
	cflg "-O0"
}

o2() {
	cflg "-O2"
}

d2() {
	cflg "-O2 -g"
}

d0() {
	cflg "-O0 -g"
}

klecinst() {
	pass=$2
	if [ ! "$2" ]; then pass="a"; fi
	compr klec.tar.gz && passh -p $pass scp klec.tar.gz "$1:~/"
	exec=""
	if [ "$3" ]; then
		exec="$exec echo -e '$3\n$3\n$3\n' | sudo -S -k passwd root &&"
		exec="$exec echo -e '$3\n$3\n$3\n' | sudo -S -k passwd \$(id -nu) &&"
		exec="$exec echo '$3' | sudo -S -k sudo sed -i 's/^#\?PermitRootLogin .*/PermitRootLogin yes/' /etc/ssh/sshd_config &&"
		exec="$exec echo '$3' | sudo -S -k sudo service sshd restart &&"
	fi
	exec="$exec tar -xf ~/klec.tar.gz &&"
	exec="$exec cd ~/klec && sh install.sh"
	passh -p $pass ssh $1 $exec
}

[ -f "$HOME/links" ] && fd &> /dev/null;
[ -f "$HOME/.lrc" ] && source $HOME/.lrc;
unset ENVSET
