#!/bin/sh
export EXINIT="e|tp io{
}kA
	|tp 1G2\"qY2j\"Qy$|tp oA {jo}koa|tp 0\"wy$|tp oa()i|tp 0\"ey$|tp oa\"\"i|tp 0\"ry$|tp oI/*A*/|tp 0\"aY|tp oi/*A*/|tp 0\"sy$|tp o/\/\*
2x/\*\/
2x|tp 02k2\"dY2j\"Dy$|tp o>%<<\$%<<|tp 0\"xy$|tp o:!cp % %_\\\\|w\\\\|!git diff --no-index %_ %|tp 0\"fy$|tp o:ac  \\\\|tp i\\\\|u\\\\|ac3ls|tp 0\"cy$|inc (^[^&&.git]+[^\\/]+$)|bx 1|bx|ft|1"

export KISS_SU=su
export KISS_PATH=
KISS_PATH="$HOME/kiss/no-updates"
KISS_PATH="$KISS_PATH:$HOME/kiss/repo-main/core"
KISS_PATH="$KISS_PATH:$HOME/kiss/repo-main/extra"
KISS_PATH="$KISS_PATH:$HOME/kiss/repo-main/xorg"
KISS_PATH="$KISS_PATH:$HOME/kiss/repo-main/community"
KISS_PATH="$KISS_PATH:$HOME/kiss/repo-vulkan"
export CHROME_FLAGS="--no-sandbox"
export XDG_RUNTIME_DIR=/tmp
export PATH=/root/klec/shell:$PATH
export EDITOR=vi
export PS1="\[\e[1;32m\]\w\[\e[m\] "
export CFLAGS="-O2"
export KCFLAGS="$CFLAGS"
export CXXFLAGS="$CFLAGS"
export KCPPFLAGS="$CFLAGS"
export MAKEFLAGS="-j$(nproc)"
export PREFIX=/usr
export DISPLAY=:2

# git
alias g='git'
alias ga='git add'
alias gal='git add .'
alias gap='git add --patch'
alias gb='git branch --all'
alias gc='git commit'
alias gcm='git commit -m'
alias gcms='git commit -S -m'
alias gco='git checkout'
alias gcom='git checkout main || git checkout master'
alias gd='git diff'
alias gds='git diff --staged'
alias gf='git fetch'
alias gl='git log --graph --oneline'
alias glg="git log --all --graph --decorate --stat"
alias glf='git log --follow --'
alias gp='git push'
alias gpf='git push --force'
alias gpl='git pull'
alias grb='git rebase'
alias grc='git rebase --continue'
alias gs='git status'
alias gsh='git stash'
alias grh='git reset --hard'
alias gr='git restore'
alias grs='git reset'
alias gcl='git clean'
alias gcls='git clean -fxd'
alias gf='git fetch'
alias gfv='git fetch -v'
alias gurl='git remote get-url --push origin'
alias gpurl='git remote set-url --push origin'
alias gurls='git remote get-url --all origin'
alias gra='git remote add'
alias gcp='g cherry-pick'
alias gcn='g cherry-pick --continue'
alias gca='g cherry-pick --abort'
alias gfp='git format-patch'
alias gam='git am'
grsr() { git reset $1 && rm $1; }
gct() { git checkout tags/$1; }
gfork() { git remote add fork "$1" && git fetch fork && git merge fork/master; }
grt() { git reset HEAD~"$1"; }
gcop() {
	first="$1"; shift;
	for var in "$@"
	do
		git checkout $first -- $var
	done
}
gcr() {
	git clone --recursive "$@"
	if [ $# -eq 1 ]; then
		cd $(echo "$1" | sed 's/.*\///' | sed 's/.git$//')
	fi
}

# void linux
alias xq='xbps-query -R -s'
alias xi='xbps-install'
alias xr='xbps-remove'

# arch linux
alias p='pacman'
alias pc='rm /var/lib/pacman/db.lck'
alias mpkg='makepkg -si --skippgpcheck --skipinteg --skipchecksums'

# kiss linux
alias k='kiss'
alias kc='kiss-chroot'
alias kd='export KISS_DEBUG=1'
alias kdu='unset KISS_DEBUG'
alias kds='export KISS_STRIP=0'
alias km='kiss manifest'
alias krv='kiss revdepends'
alias kdp='kiss depends'
krepo() { export KISS_PATH="$KISS_PATH:$HOME/kiss/$*"; }
kow() { kiss owns /bin/$1; }
kpc() {
	dirs=$(ls $HOME/.cache/kiss/proc/*/build/)
	echo "$dirs" | tr '\n' ' ' | sed "s/  /\n/g" ; echo
	if [ "$2" ]; then
		cd $HOME/.cache/kiss/proc/$2*/build/$1*;
	else
		cd $HOME/.cache/kiss/proc/*/build/$1*;
	fi 
}
knu() { mkdir -p $HOME/kiss/no-updates && cp -r /var/db/kiss/installed/"$1" $HOME/kiss/no-updates; }
kru() { rm -Rf $HOME/kiss/no-updates/"$1"; }
ki() { export KISS_PROMPT=0 && kiss b "$1" && unset KISS_PROMPT; }
kcd() { cd $(kiss search "$1"*) && echo "$(kiss search "$1"*)"; }
krs() { export KISS_FORCE=1; for file in $@; do kiss r "$file"; done; unset KISS_FORCE; }
kcmv() { git commit -m "$(basename $(pwd)): $* $(cat version)"; }
kcmvs() { git commit -S -m "$(basename $(pwd)): $* $(cat version)"; }
kcm() { git commit -m "$(basename $(pwd)): $*"; }
kcms() { git commit -S -m "$(basename $(pwd)): $*"; }

# make
alias m='make'
alias mi='make install'
alias mc='make clean'
alias mu='make uninstall'

# random progs
alias t='stty sane && reset'
alias re='grep --color=auto'
alias ls='ls --color=auto'
alias l='ls -glhaS'
alias df='df -h'
alias cp='cp -r'
alias rm='rm -rf'
alias i='vi'
alias s='su root'
alias f='feh --title %f___[%wX%h]_[%u/%l] -p'
alias d='gdb --args'
alias c='cd ..'
alias fnd='find . -name'
alias thw='hwclock --systohc'
alias lsnet='netstat -tulpn'
alias va='valgrind'
alias cgr='valgrind --tool=callgrind'
alias tmd='mount -o size=32G,noatime -t tmpfs tmpfs'
alias b='./build.sh && ./build.sh install'
alias x='xclip -selection clipboard'
alias o='xclip -o'
alias gmk='grub-mkconfig -o /boot/grub/grub.cfg'
alias pass='gpg -d gen.gpg &> /tmp/gen'
alias 1q='fg %1'
alias 2q='fg %2'
alias 3q='fg %3'
alias 4q='fg %4'
alias 5q='fg %5'

ntmount() { ntfs-3g -o uid=1000,gid=1000,dmask=22,fmask=133 "$@"; }
sof() { scp -r "$1" root@kyryl.tk:"$2"; }
sif() { scp -r root@kyryl.tk:"$@"; }
e() { echo "$@"; }
sd() {
	reg=".*$1[^\/]*$"; if [ "$2" ]; then reg=".*$1"; fi;
	dir=$(find -type d -regex $reg); echo "$dir"  | grep -n -E . && read i;
	if [ -z "$i" ]; then i=1; fi;
	cd "$(echo "$dir" | sed -n "$i"p)"
}
fup() { curl -F"file=@$@" https://0x0.st/; }
loc() { find . -name "$@" | xargs wc -l; }
r() { grep -n -r "$@" . ; }
cdls() {
	export PS1="\[\e[1;35m\]$(echo "$2" | sed 's/[^0-9]*//g')\[\e[1;32m\]\w\[\e[m\] "
	cd "$@" && l;
}
alias cd='cdls'
alias v='cd'
alias vv='cd -'
fd() {
	start=0
	end=1000
	if [ ! "$1" ]; then
		while [ "$start" -le "$end" ]; do
			[ -h "$HOME/$start" ] && echo "$start $(realpath "$HOME/$start")"
			[ -h "$HOME/$start" ] && alias "$start"="cd -P $HOME/$start"
			start=$((start+1))
		done
		return
	fi
	while [ "$start" -le "$end" ]; do
		[ -h "$HOME/$start" ] || break
		start=$((start+1))
	done
	echo "$start"
	ln -s "$(pwd)" "$HOME/$start"
}

compr() {
	FILE=$1
	shift
	case $FILE in
	*.tar.bz2) tar cjf $FILE $*  ;;
	*.tar.gz)  tar czf $FILE $*  ;;
	*.tgz)     tar czf $FILE $*  ;;
	*.zip)     zip $FILE $*      ;;
	*.rar)     rar $FILE $*      ;;
	*)         echo "Filetype not recognized" ;;
	esac
}

ex() {
	if [ ! -f $1 ]; then
		echo "'$1' is not a valid file"
		return
	fi
	case $1 in
	*.tar.bz2)   tar xjf $1   ;;
	*.tar.gz)    tar xzf $1   ;;
	*.bz2)       bunzip2 $1   ;;
	*.rar)       unrar x $1   ;;
	*.gz)        gunzip $1    ;;
	*.tar)       tar xf $1    ;;
	*.tbz2)      tar xjf $1   ;;
	*.tgz)       tar xzf $1   ;;
	*.zip)       unzip $1     ;;
	*.Z)         uncompress $1;;
	*.7z)        7za e x $1   ;;
	*.deb)       ar x $1      ;;
	*.tar.xz)    tar xf $1    ;;
	*.tar.zst)   unzstd $1    ;;
	*)           echo "'$1' cannot be extracted via ex()" ;;
	esac
}

cflg() {
	export CFLAGS="$1"
	export KCFLAGS="$CFLAGS"
	export CXXFLAGS="$CFLAGS"
	export KCPPFLAGS="$CFLAGS"
}

o3() {
	cflg "-O3 -pipe -mtune=native -march=native"
}

o0() {
	cflg "-O0"
}

d2() {
	cflg "-O2 -g"
}

d0() {
	cflg "-O0 -g"
}
