diff --git a/lib/miguru/miguru.ahk b/lib/miguru/miguru.ahk
index 315fbf9..4b6f774 100644
--- a/lib/miguru/miguru.ahk
+++ b/lib/miguru/miguru.ahk
@@ -246,7 +246,7 @@ class MiguruWM extends WMEvents {
             window := this._manage(event, hwnd)
             if !window {
                 if event == EV_WINDOW_FOCUSED
-                    && !WinExist("ahk_id" hwnd " ahk_group MIGURU_IGNORE") {
+                    && WinExist("ahk_id" hwnd " ahk_group MIGURU_MANAGE") {
                     debug("Set active to non-managed {}", WinInfo(hwnd))
                     this._maybeActiveWindow := hwnd
                     this._opts.focusIndicator.Unmanaged(hwnd)
@@ -882,8 +882,13 @@ class MiguruWM extends WMEvents {
 
     ;; Add a window for which an event happened to the global list if it hasn't
     ;; been added yet.
-    _manage(event, hwnd, retrycnt := -1) {
+    _manage(event, hwnd, retrycnt := -1, ignore := 0) {
         if this._managed.Has(hwnd) {
+            if ignore {
+               trace(() => ["Drop: unmanaging {}", hwnd])
+               this._drop(hwnd)
+               return ""
+            }
             trace(() => ["Ignoring: already managed D={} WS={} {}",
                 this._managed[hwnd].monitor.Index,
                 this._managed[hwnd].workspace.Index,
@@ -901,12 +906,12 @@ class MiguruWM extends WMEvents {
                 || IsWindowCloaked(hwnd) {
                 trace(() => ["Ignoring: hidden {}", WinInfo(hwnd)])
                 return ""
-            } else if WinExist("ahk_id" hwnd " ahk_group MIGURU_DECOLESS") {
+            } else if (ignore || WinExist("ahk_id" hwnd " ahk_group MIGURU_DECOLESS")) {
                 ;; Do nothing
             } else if WinGetStyle("ahk_id" hwnd) & WS_CAPTION == 0 {
                 trace(() => ["Ignoring: no titlebar {}", WinInfo(hwnd)])
                 return ""
-            } else if WinExist("ahk_id" hwnd " ahk_group MIGURU_IGNORE") {
+            } else if !WinExist("ahk_id" hwnd " ahk_group MIGURU_MANAGE") {
                 trace(() => ["Ignoring: ahk_group {}", WinInfo(hwnd)])
                 return ""
             }
diff --git a/mwm.ahk b/mwm.ahk
index 7ab1ec7..907a45d 100644
--- a/mwm.ahk
+++ b/mwm.ahk
@@ -7,24 +7,18 @@ KeyHistory(0), ListLines(false), ProcessSetPriority("H")
 
 #include *i lib\miguru\miguru.ahk
 #include *i lib\Popup.ahk
+#include macros.ahk
 
-GroupAdd("MIGURU_AUTOFLOAT", "Microsoft Teams-Benachrichtigung" " ahk_exe Teams.exe"                                                  )
-GroupAdd("MIGURU_AUTOFLOAT", "Microsoft Teams-Notification"     " ahk_exe Teams.exe"                                                  )
-GroupAdd("MIGURU_AUTOFLOAT",                                    " ahk_exe QuickLook.exe"                                              )
-GroupAdd("MIGURU_AUTOFLOAT",                                    " ahk_exe outlook.exe"              " ahk_class MsoSplash"            )
-GroupAdd("MIGURU_AUTOFLOAT",                                    " ahk_exe explorer.exe"             " ahk_class OperationStatusWindow")
-GroupAdd("MIGURU_AUTOFLOAT",                                    " ahk_exe taskmgr.exe"                                                )
-GroupAdd("MIGURU_AUTOFLOAT", "Calculator"                       " ahk_exe ApplicationFrameHost.exe"                                   )
-GroupAdd("MIGURU_AUTOFLOAT",                                    " ahk_exe zeal.exe"                                                   )
-GroupAdd("MIGURU_AUTOFLOAT", "Window Spy for AHKv2"                                                                                   )
-GroupAdd("MIGURU_AUTOFLOAT", "WinMerge"                                                                                               )
-
-GroupAdd("MIGURU_DECOLESS",                                     " ahk_exe qutebrowser.exe"                                            )
-GroupAdd("MIGURU_DECOLESS",                                     " ahk_exe alacritty.exe"                                              )
-GroupAdd("MIGURU_DECOLESS",                                     " ahk_exe msrdc.exe"                " ahk_class RAIL_WINDOW"          )
+GroupAdd("MIGURU_MANAGE",                                       " ahk_exe mintty.exe"                                                 )
+GroupAdd("MIGURU_MANAGE", "Window Spy for AHKv2"                                                                                      )
+GroupAdd("MIGURU_MANAGE",                                       " ahk_exe SnippingTool.exe"                                           )
+GroupAdd("MIGURU_MANAGE",                                       " ahk_exe chrome.exe"                                                 )
+GroupAdd("MIGURU_MANAGE",                                       " ahk_exe explorer.exe"                                               )
+GroupAdd("MIGURU_MANAGE",                                       " ahk_exe taskmgr.exe"                                                )
 
-GroupAdd("MIGURU_IGNORE",                                       " ahk_exe msrdc.exe"                                                  )
-GroupAdd("MIGURU_IGNORE",    "WinUI Desktop"                    " ahk_exe PowerToys.Peek.UI.exe"    " ahk_class WinUIDesktopWin32WindowClass")
+GroupAdd("MIGURU_AUTOFLOAT", "Window Spy for AHKv2"                                                                                   )
+GroupAdd("MIGURU_AUTOFLOAT",                                    " ahk_exe SnippingTool.exe"                                           )
+GroupAdd("MIGURU_DECOLESS",                                     " ahk_exe mintty.exe"                                                 )
 
 if !IsSet(MiguruWM) {
     prog := RegExReplace(A_ScriptName, "i)\.ahk$", ".exe")
@@ -36,14 +30,8 @@ if !IsSet(MiguruWM) {
 
 layouts := [
     TallLayout(),
-    WideLayout(),
     FullscreenLayout(),
     FloatingLayout(),
-    ColumnLayout(),
-    RowLayout(),
-    ThreeColumnLayout(),
-    TwoPaneLayout(),
-    SpiralLayout(),
 ]
 
 mwm := { __Call: (name, params*) => } ; Ignore requests while mwm isn't ready yet
@@ -62,7 +50,7 @@ mwm := MiguruWM({
     tilingMinWidth: 0,
     tilingMinHeight: 0,
     tilingInsertion: "last",
-    floatingAlwaysOnTop: false,
+    floatingAlwaysOnTop: true,
 
     focusFollowsMouse: false,
     mouseFollowsFocus: false,
@@ -70,7 +58,7 @@ mwm := MiguruWM({
     followWindowToWorkspace: false,
     followWindowToMonitor: false,
 
-    focusWorkspaceByWindow: true,
+    focusWorkspaceByWindow: false,
 
     delays: {
         retryManage: 100,
@@ -118,14 +106,14 @@ mod1 := "Alt"
 *.::mwm.Set("master-count", { delta: -1 })
 
 *t::mwm.Do("float-window", { value: "toggle" }), mwm.Do("center-window")
-*p::OpenSearch()
+
 *q::Reload()
 
 *Enter::mwm.Do("swap-window", { with: "master-or-mru" })
 *Space::mwm.Do("cycle-layout", { value: layouts })
 
-*vk01::MoveActiveWindow()
-*vk02::ResizeActiveWindow()
+^*vk01::MoveActiveWindow()
+^*vk02::ResizeActiveWindow()
 
 #Hotif GetKeyState(mod1, "P") and GetKeyState("Shift", "P")
 
@@ -149,7 +137,7 @@ mod1 := "Alt"
 *c::try WinClose("A")
 *q::ExitApp()
 
-*Enter::OpenTerminal()
+*Enter::Manage()
 *Space::ResetLayout()
 
 ; ..........................................................................}}}
@@ -181,25 +169,20 @@ GetSHAppFolderPath(hwnd := 0) {
     return res
 }
 
-OpenTerminal() {
-    wd := EnvGet("USERPROFILE")
-    if WinGetProcessName("A") == "explorer.exe" {
-        path := GetSHAppFolderPath()
-        if path && Substr(path, 1, 2) !== "::" {
-            wd := path
-        }
+Manage() {
+    try hwnd := WinExist("A")
+    if hwnd {
+       w := mwm._manage(EV_WINDOW_FOCUSED, hwnd, -1, 1)
+       if w != "" {
+            mwm._onWindowEvent(EV_WINDOW_REPOSITIONED, hwnd)
+       }
     }
-    Run("wt.exe -d " wd)
 }
 
 OpenTaskView() {
     Send("#{Tab}")
 }
 
-OpenSearch() {
-    Send("#s")
-}
-
 ShowDesktop() {
     Send("#d")
 }
