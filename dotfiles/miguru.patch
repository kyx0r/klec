diff --git a/lib/miguru/miguru.ahk b/lib/miguru/miguru.ahk
index 2ef8d7c..453cfb8 100644
--- a/lib/miguru/miguru.ahk
+++ b/lib/miguru/miguru.ahk
@@ -68,7 +68,7 @@ class MiguruWM extends WMEvents {
             tilingMinWidth: 500,
             tilingMinHeight: 500,
             tilingInsertion: "last",
-            floatingAlwaysOnTop: false,
+            floatingAlwaysOnTop: true,
 
             focusFollowsMouse: false,
             mouseFollowsFocus: false,
@@ -76,7 +76,7 @@ class MiguruWM extends WMEvents {
             followWindowToWorkspace: false,
             followWindowToMonitor: false,
 
-            focusWorkspaceByWindow: true,
+            focusWorkspaceByWindow: false,
 
             showPopup: (*) =>,
             focusIndicator: {
@@ -274,7 +274,7 @@ class MiguruWM extends WMEvents {
                 ;; still being invisible. So in case that same window is shown
                 ;; later on it should be additionally focused.
                 if event == EV_WINDOW_FOCUSED
-                    && !WinExist("ahk_id" hwnd " ahk_group MIGURU_IGNORE") {
+                    && WinExist("ahk_id" hwnd " ahk_group MIGURU_MANAGE") {
 
                     debug("Set maybe-active to non-managed {}", WinInfo(hwnd))
                     this._maybeActiveWindow := hwnd
@@ -933,8 +933,13 @@ class MiguruWM extends WMEvents {
 
     ;; Add a window for which an event happened to the global list if it hasn't
     ;; been added yet.
-    _manage(event, hwnd, retrycnt := -1) {
+    _manage(event, hwnd, retrycnt := -1, ignore := 0) {
         if this._managed.Has(hwnd) {
+            if ignore {
+               trace(() => ["Drop: unmanaging {}", hwnd])
+               this._drop(hwnd)
+               return ""
+            }
             trace(() => ["Ignoring: already managed D={} WS={} {}",
                 this._managed[hwnd].monitor.Index,
                 this._managed[hwnd].workspace.Index,
@@ -952,12 +957,12 @@ class MiguruWM extends WMEvents {
                 || IsWindowCloaked(hwnd) {
                 trace(() => ["Ignoring: hidden {}", WinInfo(hwnd)])
                 return ""
-            } else if WinExist("ahk_id" hwnd " ahk_group MIGURU_DECOLESS") {
+            } else if (ignore || WinExist("ahk_id" hwnd " ahk_group MIGURU_DECOLESS")) {
                 ;; Do nothing
             } else if WinGetStyle("ahk_id" hwnd) & WS_CAPTION == 0 {
                 trace(() => ["Ignoring: no titlebar {}", WinInfo(hwnd)])
                 return ""
-            } else if WinExist("ahk_id" hwnd " ahk_group MIGURU_IGNORE") {
+            } else if !WinExist("ahk_id" hwnd " ahk_group MIGURU_MANAGE") {
                 trace(() => ["Ignoring: ahk_group {}", WinInfo(hwnd)])
                 return ""
             }
diff --git a/macros.ahk b/macros.ahk
new file mode 100644
index 0000000..9993c77
--- /dev/null
+++ b/macros.ahk
@@ -0,0 +1,108 @@
+^Capslock::
+{
+	Sleep(50)
+	WinMinimize("A")    ; need A to specify Active window
+	return
+}
+
+^space::
+{
+	WinSetAlwaysOnTop -1, "A"
+}
+
+!v::
+{
+	WinSetStyle "^0xC40000", "A"
+	;WinHide "A"
+	;WinShow "A"
+}
+
+/*
+!f::
+{
+	if WinExist("ahk_class Shell_TrayWnd") {
+		WinHide "ahk_class Shell_TrayWnd"
+		;WinHide "ahk_class Shell_SecondaryTrayWnd"
+	} Else {
+		WinShow "ahk_class Shell_TrayWnd"
+		;WinShow "ahk_class Shell_SecondaryTrayWnd"
+	}
+}
+*/
+
+!y::
+{
+	SetTitleMatchMode 2
+	DetectHiddenWindows(true)
+	Sleep 100
+	Loop
+	{
+		oid := WinGetList("Remote Desktop Connection",,,)
+		aid := Array()
+		id := oid.Length
+		For v in oid
+		{
+			aid.Push(v)
+		}
+		Loop aid.Length
+		{
+			this_id := aid[A_Index]
+			this_title := WinGetTitle("ahk_id " this_id)
+			; Try to activate and restore the window if it's minimized
+			try {
+				FocusedHwnd := ControlGetHwnd("IHWindowClass1", "ahk_id " this_id)
+			} catch Error as err {
+				;ToolTip(this_title)
+				continue
+			}
+			state := WinGetMinMax("ahk_id" this_id)
+			if (state = -1)
+				WinActivate("ahk_id " this_id)
+			FocusedClassNN := ControlGetClassNN(FocusedHwnd)
+			;ToolTip(FocusedClassNN)
+			ControlShow(FocusedClassNN, "ahk_id " this_id)
+			ControlFocus(FocusedClassNN, "ahk_id " this_id)
+			ControlSend("{Shift}", FocusedClassNN, "ahk_id " this_id)
+			if (state = -1)
+				WinMinimize("ahk_id " this_id)
+		}
+		;Sleep(10000)
+		Sleep(280000)
+	}
+	return
+}
+
+/*
+!t::
+{
+	Loop {
+		Send "^{s}"
+		Sleep 1000
+		Send "{Enter}"
+		Sleep 1000
+		Send "{n}"
+		Sleep 2500
+	}
+}
+*/
+
+^!t::
+{
+	Run "C:\Users\User\Desktop\eng36.rdp"
+	WinWaitActive "ahk_exe CredentialUIBroker.exe"
+	ControlSendText(EnvGet("rdpusr"), , "ahk_exe CredentialUIBroker.exe")
+	ControlSend("{Tab}", , "ahk_exe CredentialUIBroker.exe")
+	Sleep(1500)
+	ControlSendText(EnvGet("rdppass"), , "ahk_exe CredentialUIBroker.exe")
+	Sleep(1500)
+	ControlSend("{Enter}", , "ahk_exe CredentialUIBroker.exe")
+	Sleep(1500)
+	WinWaitActive "ahk_exe CredentialUIBroker.exe"
+	ControlSendText(EnvGet("rdppass"), , "ahk_exe CredentialUIBroker.exe")
+	Sleep(1500)
+	ControlSend("{Enter}", , "ahk_exe CredentialUIBroker.exe")
+}
+
+#SuspendExempt
+!o::Suspend  ; Ctrl+Alt+S
+#SuspendExempt False
diff --git a/mwm.ahk b/mwm.ahk
index 8324297..6e456bb 100644
--- a/mwm.ahk
+++ b/mwm.ahk
@@ -7,24 +7,17 @@ KeyHistory(0), ListLines(false), ProcessSetPriority("H")
 
 #include *i lib\miguru\miguru.ahk
 #include *i lib\Popup.ahk
+#include macros.ahk
 
-GroupAdd("MIGURU_AUTOFLOAT", "Microsoft Teams-Benachrichtigung" " ahk_exe Teams.exe"                                                  )
-GroupAdd("MIGURU_AUTOFLOAT", "Microsoft Teams-Notification"     " ahk_exe Teams.exe"                                                  )
-GroupAdd("MIGURU_AUTOFLOAT",                                    " ahk_exe QuickLook.exe"                                              )
-GroupAdd("MIGURU_AUTOFLOAT",                                    " ahk_exe outlook.exe"              " ahk_class MsoSplash"            )
-GroupAdd("MIGURU_AUTOFLOAT",                                    " ahk_exe explorer.exe"             " ahk_class OperationStatusWindow")
-GroupAdd("MIGURU_AUTOFLOAT",                                    " ahk_exe taskmgr.exe"                                                )
-GroupAdd("MIGURU_AUTOFLOAT", "Calculator"                       " ahk_exe ApplicationFrameHost.exe"                                   )
-GroupAdd("MIGURU_AUTOFLOAT",                                    " ahk_exe zeal.exe"                                                   )
-GroupAdd("MIGURU_AUTOFLOAT", "Window Spy for AHKv2"                                                                                   )
-GroupAdd("MIGURU_AUTOFLOAT", "WinMerge"                                                                                               )
-
-GroupAdd("MIGURU_DECOLESS",                                     " ahk_exe qutebrowser.exe"                                            )
-GroupAdd("MIGURU_DECOLESS",                                     " ahk_exe alacritty.exe"                                              )
-GroupAdd("MIGURU_DECOLESS",                                     " ahk_exe msrdc.exe"                " ahk_class RAIL_WINDOW"          )
+GroupAdd("MIGURU_MANAGE",                                       " ahk_exe mintty.exe"                                                 )
+GroupAdd("MIGURU_MANAGE", "Window Spy for AHKv2"                                                                                      )
+GroupAdd("MIGURU_MANAGE",                                       " ahk_exe SnippingTool.exe"                                           )
+GroupAdd("MIGURU_MANAGE",                                       " ahk_exe chrome.exe"                                                 )
+GroupAdd("MIGURU_MANAGE",                                       " ahk_exe explorer.exe"                                               )
 
-GroupAdd("MIGURU_IGNORE",                                       " ahk_exe msrdc.exe"                                                  )
-GroupAdd("MIGURU_IGNORE",    "WinUI Desktop"                    " ahk_exe PowerToys.Peek.UI.exe"    " ahk_class WinUIDesktopWin32WindowClass")
+GroupAdd("MIGURU_AUTOFLOAT", "Window Spy for AHKv2"                                                                                   )
+GroupAdd("MIGURU_AUTOFLOAT",                                    " ahk_exe SnippingTool.exe"                                           )
+GroupAdd("MIGURU_DECOLESS",                                     " ahk_exe mintty.exe"                                                 )
 
 if !IsSet(MiguruWM) {
     prog := RegExReplace(A_ScriptName, "i)\.ahk$", ".exe")
@@ -36,14 +29,8 @@ if !IsSet(MiguruWM) {
 
 layouts := [
     TallLayout(),
-    WideLayout(),
     FullscreenLayout(),
     FloatingLayout(),
-    ColumnLayout(),
-    RowLayout(),
-    ThreeColumnLayout(),
-    TwoPaneLayout(),
-    SpiralLayout(),
 ]
 
 mwm := { __Call: (name, params*) => } ; Ignore requests while mwm isn't ready yet
@@ -53,7 +40,6 @@ mwm := MiguruWM({
         duration: 500,
         showIcon: true,
     }, opts)),
-    focusIndicator: HazeOver(),
     ;; â€¦see https://github.com/imawizard/MiguruWM/wiki/Configuration
 })
 
@@ -92,14 +78,14 @@ Alt::return
 *.::mwm.Set("master-count", { delta: -1 })
 
 *t::mwm.Do("float-window", { value: "toggle" }), mwm.Do("center-window")
-*p::OpenSearch()
+
 *q::Reload()
 
 *Enter::mwm.Do("swap-window", { with: "master" })
 *Space::mwm.Do("cycle-layout", { value: layouts })
 
-*vk01::MoveActiveWindow()
-*vk02::ResizeActiveWindow()
+^*vk01::MoveActiveWindow()
+^*vk02::ResizeActiveWindow()
 
 #Hotif GetKeyState(mod1, "P") and GetKeyState("Shift", "P")
 
@@ -123,7 +109,7 @@ Alt::return
 *c::try WinClose("A")
 *q::ExitApp()
 
-*Enter::OpenTerminal()
+*Enter::Manage()
 *Space::ResetLayout()
 
 ; ..........................................................................}}}
@@ -155,25 +141,20 @@ GetSHAppFolderPath(hwnd := 0) {
     return res
 }
 
-OpenTerminal() {
-    wd := EnvGet("USERPROFILE")
-    if WinGetProcessName("A") == "explorer.exe" {
-        path := GetSHAppFolderPath()
-        if path && Substr(path, 1, 2) !== "::" {
-            wd := path
-        }
+Manage() {
+    try hwnd := WinExist("A")
+    if hwnd {
+       w := mwm._manage(EV_WINDOW_FOCUSED, hwnd, -1, 1)
+       if w != "" {
+            mwm._onWindowEvent(EV_WINDOW_REPOSITIONED, hwnd)
+       }
     }
-    Run("wt.exe -d " wd)
 }
 
 OpenTaskView() {
     Send("#{Tab}")
 }
 
-OpenSearch() {
-    Send("#s")
-}
-
 ShowDesktop() {
     Send("#d")
 }
