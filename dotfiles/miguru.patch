diff --git a/macros.ahk b/macros.ahk
new file mode 100644
index 0000000..d3b062a
--- /dev/null
+++ b/macros.ahk
@@ -0,0 +1,94 @@
+
+CapsLock::Control
+
+^Capslock::
+{
+	Sleep(50)
+	WinMinimize("A")    ; need A to specify Active window
+	return
+}
+
+^space::
+{
+	WinSetAlwaysOnTop -1, "A"
+}
+
+!v::
+{
+	WinSetStyle "^0xC40000", "A"
+	;WinHide "A"
+	;WinShow "A"
+}
+
+/*
+!f::
+{
+	if WinExist("ahk_class Shell_TrayWnd") {
+		WinHide "ahk_class Shell_TrayWnd"
+		;WinHide "ahk_class Shell_SecondaryTrayWnd"
+	} Else {
+		WinShow "ahk_class Shell_TrayWnd"
+		;WinShow "ahk_class Shell_SecondaryTrayWnd"
+	}
+}
+*/
+
+!y::
+{
+	SetTitleMatchMode 2
+	DetectHiddenWindows(true)
+	Sleep 100
+	Loop
+	{
+		oid := WinGetList("Remote Desktop Connection",,,)
+		aid := Array()
+		id := oid.Length
+		For v in oid
+		{
+			aid.Push(v)
+		}
+		Loop aid.Length
+		{
+			this_id := aid[A_Index]
+			this_title := WinGetTitle("ahk_id " this_id)
+			; Try to activate and restore the window if it's minimized
+			try {
+				FocusedHwnd := ControlGetHwnd("IHWindowClass1", "ahk_id " this_id)
+			} catch Error as err {
+				;ToolTip(this_title)
+				continue
+			}
+			state := WinGetMinMax("ahk_id" this_id)
+			if (state = -1)
+				WinActivate("ahk_id " this_id)
+			FocusedClassNN := ControlGetClassNN(FocusedHwnd)
+			;ToolTip(FocusedClassNN)
+			ControlShow(FocusedClassNN, "ahk_id " this_id)
+			ControlFocus(FocusedClassNN, "ahk_id " this_id)
+			ControlSend("{Shift}", FocusedClassNN, "ahk_id " this_id)
+			if (state = -1)
+				WinMinimize("ahk_id " this_id)
+		}
+		;Sleep(10000)
+		Sleep(280000)
+	}
+	return
+}
+
+/*
+!t::
+{
+	Loop {
+		Send "^{s}"
+		Sleep 1000
+		Send "{Enter}"
+		Sleep 1000
+		Send "{n}"
+		Sleep 2500
+	}
+}
+*/
+
+#SuspendExempt
+!o::Suspend  ; Ctrl+Alt+S
+#SuspendExempt False
diff --git a/mwm.ahk b/mwm.ahk
index 7ab1ec7..ed94c0c 100644
--- a/mwm.ahk
+++ b/mwm.ahk
@@ -7,6 +7,7 @@ KeyHistory(0), ListLines(false), ProcessSetPriority("H")
 
 #include *i lib\miguru\miguru.ahk
 #include *i lib\Popup.ahk
+#include macros.ahk
 
 GroupAdd("MIGURU_AUTOFLOAT", "Microsoft Teams-Benachrichtigung" " ahk_exe Teams.exe"                                                  )
 GroupAdd("MIGURU_AUTOFLOAT", "Microsoft Teams-Notification"     " ahk_exe Teams.exe"                                                  )
@@ -18,10 +19,13 @@ GroupAdd("MIGURU_AUTOFLOAT", "Calculator"                       " ahk_exe Applic
 GroupAdd("MIGURU_AUTOFLOAT",                                    " ahk_exe zeal.exe"                                                   )
 GroupAdd("MIGURU_AUTOFLOAT", "Window Spy for AHKv2"                                                                                   )
 GroupAdd("MIGURU_AUTOFLOAT", "WinMerge"                                                                                               )
+GroupAdd("MIGURU_IGNORE",                                       " ahk_exe mstsc.exe"                                                  )
+GroupAdd("MIGURU_IGNORE",                                       " ahk_exe VirtualBox.exe"                                             )
 
 GroupAdd("MIGURU_DECOLESS",                                     " ahk_exe qutebrowser.exe"                                            )
 GroupAdd("MIGURU_DECOLESS",                                     " ahk_exe alacritty.exe"                                              )
 GroupAdd("MIGURU_DECOLESS",                                     " ahk_exe msrdc.exe"                " ahk_class RAIL_WINDOW"          )
+GroupAdd("MIGURU_DECOLESS",                                     " ahk_exe mintty.exe"                                                 )
 
 GroupAdd("MIGURU_IGNORE",                                       " ahk_exe msrdc.exe"                                                  )
 GroupAdd("MIGURU_IGNORE",    "WinUI Desktop"                    " ahk_exe PowerToys.Peek.UI.exe"    " ahk_class WinUIDesktopWin32WindowClass")
@@ -36,14 +40,8 @@ if !IsSet(MiguruWM) {
 
 layouts := [
     TallLayout(),
-    WideLayout(),
     FullscreenLayout(),
     FloatingLayout(),
-    ColumnLayout(),
-    RowLayout(),
-    ThreeColumnLayout(),
-    TwoPaneLayout(),
-    SpiralLayout(),
 ]
 
 mwm := { __Call: (name, params*) => } ; Ignore requests while mwm isn't ready yet
@@ -124,8 +122,8 @@ mod1 := "Alt"
 *Enter::mwm.Do("swap-window", { with: "master-or-mru" })
 *Space::mwm.Do("cycle-layout", { value: layouts })
 
-*vk01::MoveActiveWindow()
-*vk02::ResizeActiveWindow()
+^*vk01::MoveActiveWindow()
+^*vk02::ResizeActiveWindow()
 
 #Hotif GetKeyState(mod1, "P") and GetKeyState("Shift", "P")
 
